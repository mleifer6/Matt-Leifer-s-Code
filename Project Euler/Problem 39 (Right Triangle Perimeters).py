
# coding: utf-8

# In[2]:

def gcd(x,y):
    while y != 0:
        (x, y) = (y, x % y)
    return x


# In[46]:

### Given two intergers m and n with m>n, the sides of any right triangle can be expressed as m^2-n^2, 2mn, and m^2+n^2.
### Therefore, the perimter of a right triangle is 2m(m+n).  This formula, however, generates all reduced triples and only some 
### unreduced ones. The triple generated by Euclid's formula is primitive if and only if m and n are coprime and m âˆ’ n is odd.
import time
start = time.time()
m=2
n=1
triples=[]
while m<=22:
    n=1
    while n<m:
        if (m-n)%2==1 and gcd(m,n)==1 and 2*m*(m+n)<=1000:
            a_prim=m**2-n**2
            b_prim=2*m*n
            c_prim=m**2+n**2
            triple=[a_prim,b_prim,c_prim]
            triples.append(triple)
            k=2
            a=0 #Create the variables
            b=0
            c=0
            while a+b+c<=1000:
                a=a_prim*k
                b=b_prim*k
                c=c_prim*k
                triple=[a,b,c]
                if a+b+c<=1000:
                    triples.append(triple)
                k+=1
        n+=1
    m+=1

perimeters=[]
i=0
j=0
while i<len(triples):
    perimeter=0
    j=0
    while j<len(triples[i]):
        perimeter+=triples[i][j]
        j+=1
    perimeters.append(perimeter)
    i+=1
perimeters.sort()

i=0
j=0
answer=0
max_occur=0
while i<len(perimeters):
    j=i
    occurence=0
    while perimeters[j]==perimeters[j-1]:
        occurence+=1
        if occurence>max_occur:
            max_occur=occurence
            answer=perimeters[i]
        j+=1
    i+=1
print answer, max_occur
elapsed = time.time() - start
print "Result found in %s seconds" % elapsed


# In[45]:




# In[45]:




# In[ ]:



